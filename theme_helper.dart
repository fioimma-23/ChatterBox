import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(30.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray60001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 16.fSize,
          fontFamily: 'Chivo',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray60001,
          fontSize: 14.fSize,
          fontFamily: 'Chivo',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black90001,
          fontSize: 12.fSize,
          fontFamily: 'Chivo',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 32.fSize,
          fontFamily: 'Croissant One',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 24.fSize,
          fontFamily: 'Croissant One',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray60001,
          fontSize: 12.fSize,
          fontFamily: 'Chivo',
          fontWeight: FontWeight.w900,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 20.fSize,
          fontFamily: 'Chivo',
          fontWeight: FontWeight.w900,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 18.fSize,
          fontFamily: 'Chivo',
          fontWeight: FontWeight.w900,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF7000FF),
    primaryContainer: Color(0X33B283FF),
    secondaryContainer: Color(0XFF411C71),

    // Error colors
    errorContainer: Color(0XFFFF00B7),
    onErrorContainer: Color(0XFF000D07),

    // On colors(text colors)
    onPrimary: Color(0X33FFF400),
    onPrimaryContainer: Color(0XFF261141),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF0F0F0F);
  Color get black90001 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray10001 => Color(0XFFD1D1D6);
  Color get blueGray400 => Color(0XFF8A8A8A);
  Color get blueGray900 => Color(0XFF2D144C);
  Color get blueGray90001 => Color(0XFF2F1156);
  Color get blueGray90002 => Color(0XFF2D2D2D);
  Color get blueGray90003 => Color(0XFF331757);
  Color get blueGray90004 => Color(0XFF2D1052);

  // Cyan
  Color get cyanA400 => Color(0XFF00D1FF);

  // DeepPurple
  Color get deepPurpleA20033 => Color(0X339542FF);

  // Gray
  Color get gray100 => Color(0XFFF2F8F7);
  Color get gray400 => Color(0XFFC3C3C3);
  Color get gray50 => Color(0XFFF7F7FC);
  Color get gray500 => Color(0XFFA6A6A6);
  Color get gray50001 => Color(0XFF999E9B);
  Color get gray50002 => Color(0XFF9A9E9C);
  Color get gray600 => Color(0XFF797C7A);
  Color get gray60001 => Color(0XFF797C7B);
  Color get gray800 => Color(0XFF363F3B);
  Color get gray900 => Color(0XFF242424);

  // Green
  Color get greenA400 => Color(0XFF0FE16D);

  // Indigo
  Color get indigo900 => Color(0XFF381762);

  // Pink
  Color get pinkA200 => Color(0XFFFF00A8);

  // Purple
  Color get purpleA40033 => Color(0X33F900FF);

  // Red
  Color get red400 => Color(0XFFF04A4C);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  Color get deepPurpleA700 => Color(0XFF512DA8);


}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
